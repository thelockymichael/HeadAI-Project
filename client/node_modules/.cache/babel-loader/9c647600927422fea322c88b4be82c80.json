{"ast":null,"code":"var _jsxFileName = \"/home/michalo/Web-teknologian peruskonseptit/week3/HEAD_AI_02_TOIMIVA/client/src/containers/TextToSkills.js\";\nimport React, { useState } from \"react\";\nimport skillService from \"../services/skills\";\nimport TextToSkillComponent from \"../components/TextToSkillsComponent\";\nimport { useField } from \"../hooks/index\";\n\nconst TextToSkills = () => {\n  //const [text, setText] = useState(\"\");\n  const textInput = useField(\"text\");\n  const skillsText = useField(\"text\");\n  const [skills, setSkills] = useState(null);\n  const [message, setMessage] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    skillService.create(textInput.value).then(response => {\n      if (!response.length) {\n        return null;\n      }\n\n      setMessage({\n        type: \"success\",\n        message: `Your skills are${response.map((skill, index) => index === response.length - 1 ? ` and ${skill}` : ` ${skill}`)}`\n      });\n      setTimeout(() => {\n        setMessage(\"\");\n      }, 5000);\n      setSkills(response);\n      console.log(\"message\", message);\n      console.log(response);\n    }).catch(error => {\n      setMessage({\n        type: \"danger\",\n        message: `${error.message}`\n      });\n      setTimeout(() => {\n        setMessage(\"\");\n      }, 5000);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(TextToSkillComponent, {\n    message: message,\n    submitHandler: submitHandler,\n    skills: skills,\n    textInput: textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default TextToSkills;\n/* import React, { useState } from \"react\";\nimport { Table, Form, InputGroup, Button, FormControl } from \"react-bootstrap\";\nimport Notification from \"../components/Notification\";\nimport skillService from \"../services/skills\";\n\nconst TextToSkills = () => {\n  const [text, setText] = useState(\"\");\n  const [skills, setSkills] = useState(null);\n\n  const [message, setMessage] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    console.log(\"text\", text);\n    skillService\n      .create(text)\n      .then(response => {\n        if (!response.length) {\n          return null;\n        }\n        setMessage({\n          type: \"success\",\n          message: `Your skills are${response.map((skill, index) =>\n            index === response.length - 1 ? ` and ${skill}` : ` ${skill}`\n          )}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n        setSkills(response);\n        console.log(\"message\", message);\n        console.log(response);\n      })\n      .catch(error => {\n        setMessage({\n          type: \"danger\",\n          message: `${error.message}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n      });\n  };\n\n  return (\n    <>\n      {message && <Notification message={message} />}\n      <Form onSubmit={submitHandler}>\n        <InputGroup>\n          <FormControl\n            onChange={({ target }) => setText(target.value)}\n            required\n            placeholder=\"Insert the text from your CV and convert it into words\"\n            as=\"textarea\"\n            aria-label=\"Search for skills\"\n          />\n          <InputGroup.Append>\n            <Button type=\"submti\" variant=\"outline-secondary\">\n              Search for skills\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form>\n      <br />\n      {!skills ? (\n        <h4>Skills are displayed here</h4>\n      ) : (\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Skills</th>\n            </tr>\n          </thead>\n          <tbody>\n            {skills.map((skill, index) => {\n              return (\n                <>\n                  <tr>\n                    <td>{index}</td>\n                    <td>{skill}</td>\n                  </tr>\n                </>\n              );\n            })}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default TextToSkills;\n */","map":{"version":3,"sources":["/home/michalo/Web-teknologian peruskonseptit/week3/HEAD_AI_02_TOIMIVA/client/src/containers/TextToSkills.js"],"names":["React","useState","skillService","TextToSkillComponent","useField","TextToSkills","textInput","skillsText","skills","setSkills","message","setMessage","type","submitHandler","event","preventDefault","create","value","then","response","length","map","skill","index","setTimeout","console","log","catch","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACzB;AACA,QAAMC,SAAS,GAAGF,QAAQ,CAAC,MAAD,CAA1B;AACA,QAAMG,UAAU,GAAGH,QAAQ,CAAC,MAAD,CAA3B;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC;AACrCW,IAAAA,IAAI,EAAE,EAD+B;AAErCF,IAAAA,OAAO,EAAE;AAF4B,GAAD,CAAtC;;AAKA,QAAMG,aAAa,GAAGC,KAAK,IAAI;AAC7BA,IAAAA,KAAK,CAACC,cAAN;AACAb,IAAAA,YAAY,CACTc,MADH,CACUV,SAAS,CAACW,KADpB,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,UAAI,CAACA,QAAQ,CAACC,MAAd,EAAsB;AACpB,eAAO,IAAP;AACD;;AACDT,MAAAA,UAAU,CAAC;AACTC,QAAAA,IAAI,EAAE,SADG;AAETF,QAAAA,OAAO,EAAG,kBAAiBS,QAAQ,CAACE,GAAT,CAAa,CAACC,KAAD,EAAQC,KAAR,KACtCA,KAAK,KAAKJ,QAAQ,CAACC,MAAT,GAAkB,CAA5B,GAAiC,QAAOE,KAAM,EAA9C,GAAmD,IAAGA,KAAM,EADnC,CAEzB;AAJO,OAAD,CAAV;AAMAE,MAAAA,UAAU,CAAC,MAAM;AACfb,QAAAA,UAAU,CAAC,EAAD,CAAV;AACD,OAFS,EAEP,IAFO,CAAV;AAGAF,MAAAA,SAAS,CAACU,QAAD,CAAT;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBhB,OAAvB;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;AACD,KAlBH,EAmBGQ,KAnBH,CAmBSC,KAAK,IAAI;AACdjB,MAAAA,UAAU,CAAC;AACTC,QAAAA,IAAI,EAAE,QADG;AAETF,QAAAA,OAAO,EAAG,GAAEkB,KAAK,CAAClB,OAAQ;AAFjB,OAAD,CAAV;AAIAc,MAAAA,UAAU,CAAC,MAAM;AACfb,QAAAA,UAAU,CAAC,EAAD,CAAV;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KA3BH;AA4BD,GA9BD;;AAgCA,sBACE,oBAAC,oBAAD;AACE,IAAA,OAAO,EAAED,OADX;AAEE,IAAA,aAAa,EAAEG,aAFjB;AAGE,IAAA,MAAM,EAAEL,MAHV;AAIE,IAAA,SAAS,EAAEF,SAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAQD,CAnDD;;AAqDA,eAAeD,YAAf;AAEA","sourcesContent":["import React, { useState } from \"react\";\nimport skillService from \"../services/skills\";\nimport TextToSkillComponent from \"../components/TextToSkillsComponent\";\nimport { useField } from \"../hooks/index\";\n\nconst TextToSkills = () => {\n  //const [text, setText] = useState(\"\");\n  const textInput = useField(\"text\");\n  const skillsText = useField(\"text\");\n  const [skills, setSkills] = useState(null);\n\n  const [message, setMessage] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    skillService\n      .create(textInput.value)\n      .then(response => {\n        if (!response.length) {\n          return null;\n        }\n        setMessage({\n          type: \"success\",\n          message: `Your skills are${response.map((skill, index) =>\n            index === response.length - 1 ? ` and ${skill}` : ` ${skill}`\n          )}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n        setSkills(response);\n        console.log(\"message\", message);\n        console.log(response);\n      })\n      .catch(error => {\n        setMessage({\n          type: \"danger\",\n          message: `${error.message}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n      });\n  };\n\n  return (\n    <TextToSkillComponent\n      message={message}\n      submitHandler={submitHandler}\n      skills={skills}\n      textInput={textInput}\n    />\n  );\n};\n\nexport default TextToSkills;\n\n/* import React, { useState } from \"react\";\nimport { Table, Form, InputGroup, Button, FormControl } from \"react-bootstrap\";\nimport Notification from \"../components/Notification\";\nimport skillService from \"../services/skills\";\n\nconst TextToSkills = () => {\n  const [text, setText] = useState(\"\");\n  const [skills, setSkills] = useState(null);\n\n  const [message, setMessage] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    console.log(\"text\", text);\n    skillService\n      .create(text)\n      .then(response => {\n        if (!response.length) {\n          return null;\n        }\n        setMessage({\n          type: \"success\",\n          message: `Your skills are${response.map((skill, index) =>\n            index === response.length - 1 ? ` and ${skill}` : ` ${skill}`\n          )}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n        setSkills(response);\n        console.log(\"message\", message);\n        console.log(response);\n      })\n      .catch(error => {\n        setMessage({\n          type: \"danger\",\n          message: `${error.message}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n      });\n  };\n\n  return (\n    <>\n      {message && <Notification message={message} />}\n      <Form onSubmit={submitHandler}>\n        <InputGroup>\n          <FormControl\n            onChange={({ target }) => setText(target.value)}\n            required\n            placeholder=\"Insert the text from your CV and convert it into words\"\n            as=\"textarea\"\n            aria-label=\"Search for skills\"\n          />\n          <InputGroup.Append>\n            <Button type=\"submti\" variant=\"outline-secondary\">\n              Search for skills\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form>\n      <br />\n      {!skills ? (\n        <h4>Skills are displayed here</h4>\n      ) : (\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Skills</th>\n            </tr>\n          </thead>\n          <tbody>\n            {skills.map((skill, index) => {\n              return (\n                <>\n                  <tr>\n                    <td>{index}</td>\n                    <td>{skill}</td>\n                  </tr>\n                </>\n              );\n            })}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default TextToSkills;\n */\n"]},"metadata":{},"sourceType":"module"}