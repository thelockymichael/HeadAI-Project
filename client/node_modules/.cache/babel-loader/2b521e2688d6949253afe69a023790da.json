{"ast":null,"code":"var _jsxFileName = \"/home/michalo/Web-teknologian peruskonseptit/week3/HEAD_AI_02_TOIMIVA/client/src/containers/JobsByKeyWords.js\";\nimport React, { useState } from \"react\";\nimport jobService from \"../services/jobs\";\nimport JobsByKeyWordsComponent from \"../components/JobsByKeyWordsComponent\";\nimport { useField } from \"../hooks/index\";\n\nconst JobsByKeyWords = () => {\n  //const [text, setText] = useState(\"\");\n  const words = useField(\"text\");\n  const area = useField(\"text\");\n  const time_range_start = useField(\"text\");\n  const [jobs, setJobs] = useState([]);\n  const [message, setMessage] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    console.log(\"newobject\", {\n      words,\n      area,\n      time_range_start\n    });\n    jobService.create({\n      words: words.value,\n      area: area.value,\n      time_range_start: time_range_start.value\n    }).then(response => {\n      if (!response.length) {\n        return null;\n      }\n\n      setMessage({\n        type: \"success\",\n        message: `Your skills are${response.map((skill, index) => index === response.length - 1 ? ` and ${skill}` : ` ${skill}`)}`\n      });\n      setTimeout(() => {\n        setMessage(\"\");\n      }, 5000);\n      setJobs(response.data.results);\n      console.log(\"message\", message);\n      console.log(response);\n    }).catch(error => {\n      setMessage({\n        type: \"danger\",\n        message: `${error.message}`\n      });\n      setTimeout(() => {\n        setMessage(\"\");\n      }, 5000);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(JobsByKeyWordsComponent, {\n    words: words,\n    area: area,\n    time_range_start: time_range_start,\n    message: message,\n    submitHandler: submitHandler,\n    jobs: jobs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default JobsByKeyWords;\n/* import React, { useState } from \"react\";\nimport { Table, Form, InputGroup, Button, FormControl } from \"react-bootstrap\";\nimport Notification from \"../components/Notification\";\nimport skillService from \"../services/skills\";\n\nconst TextToSkills = () => {\n  const [text, setText] = useState(\"\");\n  const [skills, setSkills] = useState(null);\n\n  const [message, setMessage] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    console.log(\"text\", text);\n    skillService\n      .create(text)\n      .then(response => {\n        if (!response.length) {\n          return null;\n        }\n        setMessage({\n          type: \"success\",\n          message: `Your skills are${response.map((skill, index) =>\n            index === response.length - 1 ? ` and ${skill}` : ` ${skill}`\n          )}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n        setSkills(response);\n        console.log(\"message\", message);\n        console.log(response);\n      })\n      .catch(error => {\n        setMessage({\n          type: \"danger\",\n          message: `${error.message}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n      });\n  };\n\n  return (\n    <>\n      {message && <Notification message={message} />}\n      <Form onSubmit={submitHandler}>\n        <InputGroup>\n          <FormControl\n            onChange={({ target }) => setText(target.value)}\n            required\n            placeholder=\"Insert the text from your CV and convert it into words\"\n            as=\"textarea\"\n            aria-label=\"Search for skills\"\n          />\n          <InputGroup.Append>\n            <Button type=\"submti\" variant=\"outline-secondary\">\n              Search for skills\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form>\n      <br />\n      {!skills ? (\n        <h4>Skills are displayed here</h4>\n      ) : (\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Skills</th>\n            </tr>\n          </thead>\n          <tbody>\n            {skills.map((skill, index) => {\n              return (\n                <>\n                  <tr>\n                    <td>{index}</td>\n                    <td>{skill}</td>\n                  </tr>\n                </>\n              );\n            })}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default TextToSkills;\n */","map":{"version":3,"sources":["/home/michalo/Web-teknologian peruskonseptit/week3/HEAD_AI_02_TOIMIVA/client/src/containers/JobsByKeyWords.js"],"names":["React","useState","jobService","JobsByKeyWordsComponent","useField","JobsByKeyWords","words","area","time_range_start","jobs","setJobs","message","setMessage","type","submitHandler","event","preventDefault","console","log","create","value","then","response","length","map","skill","index","setTimeout","data","results","catch","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,uBAAP,MAAoC,uCAApC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B;AACA,QAAMC,KAAK,GAAGF,QAAQ,CAAC,MAAD,CAAtB;AACA,QAAMG,IAAI,GAAGH,QAAQ,CAAC,MAAD,CAArB;AACA,QAAMI,gBAAgB,GAAGJ,QAAQ,CAAC,MAAD,CAAjC;AACA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC;AACrCY,IAAAA,IAAI,EAAE,EAD+B;AAErCF,IAAAA,OAAO,EAAE;AAF4B,GAAD,CAAtC;;AAKA,QAAMG,aAAa,GAAGC,KAAK,IAAI;AAC7BA,IAAAA,KAAK,CAACC,cAAN;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB;AACvBZ,MAAAA,KADuB;AAEvBC,MAAAA,IAFuB;AAGvBC,MAAAA;AAHuB,KAAzB;AAKAN,IAAAA,UAAU,CACPiB,MADH,CACU;AACNb,MAAAA,KAAK,EAAEA,KAAK,CAACc,KADP;AAENb,MAAAA,IAAI,EAAEA,IAAI,CAACa,KAFL;AAGNZ,MAAAA,gBAAgB,EAAEA,gBAAgB,CAACY;AAH7B,KADV,EAMGC,IANH,CAMQC,QAAQ,IAAI;AAChB,UAAI,CAACA,QAAQ,CAACC,MAAd,EAAsB;AACpB,eAAO,IAAP;AACD;;AACDX,MAAAA,UAAU,CAAC;AACTC,QAAAA,IAAI,EAAE,SADG;AAETF,QAAAA,OAAO,EAAG,kBAAiBW,QAAQ,CAACE,GAAT,CAAa,CAACC,KAAD,EAAQC,KAAR,KACtCA,KAAK,KAAKJ,QAAQ,CAACC,MAAT,GAAkB,CAA5B,GAAiC,QAAOE,KAAM,EAA9C,GAAmD,IAAGA,KAAM,EADnC,CAEzB;AAJO,OAAD,CAAV;AAMAE,MAAAA,UAAU,CAAC,MAAM;AACff,QAAAA,UAAU,CAAC,EAAD,CAAV;AACD,OAFS,EAEP,IAFO,CAAV;AAGAF,MAAAA,OAAO,CAACY,QAAQ,CAACM,IAAT,CAAcC,OAAf,CAAP;AACAZ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBP,OAAvB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYI,QAAZ;AACD,KAtBH,EAuBGQ,KAvBH,CAuBSC,KAAK,IAAI;AACdnB,MAAAA,UAAU,CAAC;AACTC,QAAAA,IAAI,EAAE,QADG;AAETF,QAAAA,OAAO,EAAG,GAAEoB,KAAK,CAACpB,OAAQ;AAFjB,OAAD,CAAV;AAIAgB,MAAAA,UAAU,CAAC,MAAM;AACff,QAAAA,UAAU,CAAC,EAAD,CAAV;AACD,OAFS,EAEP,IAFO,CAAV;AAGD,KA/BH;AAgCD,GAxCD;;AA0CA,sBACE,oBAAC,uBAAD;AACE,IAAA,KAAK,EAAEN,KADT;AAEE,IAAA,IAAI,EAAEC,IAFR;AAGE,IAAA,gBAAgB,EAAEC,gBAHpB;AAIE,IAAA,OAAO,EAAEG,OAJX;AAKE,IAAA,aAAa,EAAEG,aALjB;AAME,IAAA,IAAI,EAAEL,IANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUD,CAhED;;AAkEA,eAAeJ,cAAf;AAEA","sourcesContent":["import React, { useState } from \"react\";\nimport jobService from \"../services/jobs\";\nimport JobsByKeyWordsComponent from \"../components/JobsByKeyWordsComponent\";\nimport { useField } from \"../hooks/index\";\n\nconst JobsByKeyWords = () => {\n  //const [text, setText] = useState(\"\");\n  const words = useField(\"text\");\n  const area = useField(\"text\");\n  const time_range_start = useField(\"text\");\n  const [jobs, setJobs] = useState([]);\n\n  const [message, setMessage] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    console.log(\"newobject\", {\n      words,\n      area,\n      time_range_start\n    });\n    jobService\n      .create({\n        words: words.value,\n        area: area.value,\n        time_range_start: time_range_start.value\n      })\n      .then(response => {\n        if (!response.length) {\n          return null;\n        }\n        setMessage({\n          type: \"success\",\n          message: `Your skills are${response.map((skill, index) =>\n            index === response.length - 1 ? ` and ${skill}` : ` ${skill}`\n          )}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n        setJobs(response.data.results);\n        console.log(\"message\", message);\n        console.log(response);\n      })\n      .catch(error => {\n        setMessage({\n          type: \"danger\",\n          message: `${error.message}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n      });\n  };\n\n  return (\n    <JobsByKeyWordsComponent\n      words={words}\n      area={area}\n      time_range_start={time_range_start}\n      message={message}\n      submitHandler={submitHandler}\n      jobs={jobs}\n    />\n  );\n};\n\nexport default JobsByKeyWords;\n\n/* import React, { useState } from \"react\";\nimport { Table, Form, InputGroup, Button, FormControl } from \"react-bootstrap\";\nimport Notification from \"../components/Notification\";\nimport skillService from \"../services/skills\";\n\nconst TextToSkills = () => {\n  const [text, setText] = useState(\"\");\n  const [skills, setSkills] = useState(null);\n\n  const [message, setMessage] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  const submitHandler = event => {\n    event.preventDefault();\n    console.log(\"text\", text);\n    skillService\n      .create(text)\n      .then(response => {\n        if (!response.length) {\n          return null;\n        }\n        setMessage({\n          type: \"success\",\n          message: `Your skills are${response.map((skill, index) =>\n            index === response.length - 1 ? ` and ${skill}` : ` ${skill}`\n          )}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n        setSkills(response);\n        console.log(\"message\", message);\n        console.log(response);\n      })\n      .catch(error => {\n        setMessage({\n          type: \"danger\",\n          message: `${error.message}`\n        });\n        setTimeout(() => {\n          setMessage(\"\");\n        }, 5000);\n      });\n  };\n\n  return (\n    <>\n      {message && <Notification message={message} />}\n      <Form onSubmit={submitHandler}>\n        <InputGroup>\n          <FormControl\n            onChange={({ target }) => setText(target.value)}\n            required\n            placeholder=\"Insert the text from your CV and convert it into words\"\n            as=\"textarea\"\n            aria-label=\"Search for skills\"\n          />\n          <InputGroup.Append>\n            <Button type=\"submti\" variant=\"outline-secondary\">\n              Search for skills\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Form>\n      <br />\n      {!skills ? (\n        <h4>Skills are displayed here</h4>\n      ) : (\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Skills</th>\n            </tr>\n          </thead>\n          <tbody>\n            {skills.map((skill, index) => {\n              return (\n                <>\n                  <tr>\n                    <td>{index}</td>\n                    <td>{skill}</td>\n                  </tr>\n                </>\n              );\n            })}\n          </tbody>\n        </Table>\n      )}\n    </>\n  );\n};\n\nexport default TextToSkills;\n */\n"]},"metadata":{},"sourceType":"module"}